# auto-generated by grc.converter

id: sigmf_source
label: SigMF Source
category: '[SigMF]'

parameters:
-   id: filename
    label: File
    dtype: file_open
-   id: type
    label: Output Type
    dtype: enum
    options: [fc32, sc32, sc16, sc8, f64, f32, s64, s32, s16, s8]
    option_labels: [Complex Float 32, Complex Integer 32, Complex Integer 16, Complex
            Integer 8, Float 64, Float 32, Integer 64, Integer 32, Integer 16, Integer
            8]
    option_attributes:
        sigmf_type: [cf32, ci32, ci16, ci8, rf64, rf32, ri64, ri32, ri16, ri8]
    hide: part
-   id: repeat
    label: Repeat
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: nchan
    label: Num Channels
    dtype: int
    default: 1
    options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
    57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
    76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
    95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
    111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
    126, 127, 128]
    hide: part

inputs:
-   domain: message
    id: command
    optional: true

outputs:
-   domain: stream
    dtype: ${ type }
    multiplicity: ${ nchan }
-   domain: message
    id: meta
    optional: true

templates:
    imports: |-
        import gr_sigmf
        import sys
    make: |-
        gr_sigmf.source(${filename}, "${type.sigmf_type}" + ("_le" if
        sys.byteorder
            == "little" else "_be"), ${repeat}, ${nchan})

documentation: |-
    Stream data from a SigMF recording.

file_format: 1
