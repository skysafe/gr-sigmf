# This file was intially auto-generated by grc.converter, however,
# did not work after initial conversion.  Manual editing was required
# to fix the make statement.

# auto-generated by grc.converter


id: sigmf_sink
label: SigMF Sink
category: '[SigMF]'

parameters:
-   id: filename
    label: File
    dtype: file_save
-   id: type
    label: Input Type
    dtype: enum
    options: [fc32, sc32, sc16, sc8, f64, f32, s64, s32, s16, s8]
    option_labels: [Complex Float 32, Complex Integer 32, Complex Integer 16, Complex
            Integer 8, Float 64, Float 32, Integer 64, Integer 32, Integer 16, Integer
            8]
    option_attributes:
        sigmf_type: [cf32, ci32, ci16, ci8, rf64, rf32, ri64, ri32, ri16, ri8]
    hide: part
-   id: samp_rate
    label: Sample Rate
    dtype: real
    default: samp_rate
-   id: nchan
    label: Number of Channels
    dtype: int
    default: 1
    options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
    57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
    76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
    95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
    111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
    126, 127, 128]
    hide: part
-   id: time_mode
    label: Time Handling Mode
    dtype: enum
    default: gr_sigmf.sigmf_time_mode_relative
    options: [gr_sigmf.sigmf_time_mode_absolute, gr_sigmf.sigmf_time_mode_relative]
    option_labels: [Absolute, Relative]
-   id: description
    label: Description
    dtype: string
-   id: author
    label: Author
    dtype: string
-   id: license
    label: License
    dtype: string
-   id: hardware
    label: Hardware
    dtype: string
-   id: num_extra_fields
    label: Extra Metadata Fields
    category: Metadata
    dtype: enum
    default: '0'
    options: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',
        '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25']
    hide: part
-   id: field_1_key
    label: Field 1 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 1 else 'all') }
-   id: field_1_type
    label: Field 1 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 1 else 'all') }
-   id: field_1_value
    label: Field 1 Value
    category: Metadata
    dtype: ${ field_1_type }
    hide: ${ ('part' if int(num_extra_fields) >= 1 else 'all') }
-   id: field_2_key
    label: Field 2 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 2 else 'all') }
-   id: field_2_type
    label: Field 2 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 2 else 'all') }
-   id: field_2_value
    label: Field 2 Value
    category: Metadata
    dtype: ${ field_2_type }
    hide: ${ ('part' if int(num_extra_fields) >= 2 else 'all') }
-   id: field_3_key
    label: Field 3 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 3 else 'all') }
-   id: field_3_type
    label: Field 3 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 3 else 'all') }
-   id: field_3_value
    label: Field 3 Value
    category: Metadata
    dtype: ${ field_3_type }
    hide: ${ ('part' if int(num_extra_fields) >= 3 else 'all') }
-   id: field_4_key
    label: Field 4 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 4 else 'all') }
-   id: field_4_type
    label: Field 4 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 4 else 'all') }
-   id: field_4_value
    label: Field 4 Value
    category: Metadata
    dtype: ${ field_4_type }
    hide: ${ ('part' if int(num_extra_fields) >= 4 else 'all') }
-   id: field_5_key
    label: Field 5 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 5 else 'all') }
-   id: field_5_type
    label: Field 5 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 5 else 'all') }
-   id: field_5_value
    label: Field 5 Value
    category: Metadata
    dtype: ${ field_5_type }
    hide: ${ ('part' if int(num_extra_fields) >= 5 else 'all') }
-   id: field_6_key
    label: Field 6 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 6 else 'all') }
-   id: field_6_type
    label: Field 6 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 6 else 'all') }
-   id: field_6_value
    label: Field 6 Value
    category: Metadata
    dtype: ${ field_6_type }
    hide: ${ ('part' if int(num_extra_fields) >= 6 else 'all') }
-   id: field_7_key
    label: Field 7 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 7 else 'all') }
-   id: field_7_type
    label: Field 7 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 7 else 'all') }
-   id: field_7_value
    label: Field 7 Value
    category: Metadata
    dtype: ${ field_7_type }
    hide: ${ ('part' if int(num_extra_fields) >= 7 else 'all') }
-   id: field_8_key
    label: Field 8 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 8 else 'all') }
-   id: field_8_type
    label: Field 8 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 8 else 'all') }
-   id: field_8_value
    label: Field 8 Value
    category: Metadata
    dtype: ${ field_8_type }
    hide: ${ ('part' if int(num_extra_fields) >= 8 else 'all') }
-   id: field_9_key
    label: Field 9 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 9 else 'all') }
-   id: field_9_type
    label: Field 9 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 9 else 'all') }
-   id: field_9_value
    label: Field 9 Value
    category: Metadata
    dtype: ${ field_9_type }
    hide: ${ ('part' if int(num_extra_fields) >= 9 else 'all') }
-   id: field_10_key
    label: Field 10 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 10 else 'all') }
-   id: field_10_type
    label: Field 10 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 10 else 'all') }
-   id: field_10_value
    label: Field 10 Value
    category: Metadata
    dtype: ${ field_10_type }
    hide: ${ ('part' if int(num_extra_fields) >= 10 else 'all') }
-   id: field_11_key
    label: Field 11 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 11 else 'all') }
-   id: field_11_type
    label: Field 11 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 11 else 'all') }
-   id: field_11_value
    label: Field 11 Value
    category: Metadata
    dtype: ${ field_11_type }
    hide: ${ ('part' if int(num_extra_fields) >= 11 else 'all') }
-   id: field_12_key
    label: Field 12 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 12 else 'all') }
-   id: field_12_type
    label: Field 12 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 12 else 'all') }
-   id: field_12_value
    label: Field 12 Value
    category: Metadata
    dtype: ${ field_12_type }
    hide: ${ ('part' if int(num_extra_fields) >= 12 else 'all') }
-   id: field_13_key
    label: Field 13 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 13 else 'all') }
-   id: field_13_type
    label: Field 13 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 13 else 'all') }
-   id: field_13_value
    label: Field 13 Value
    category: Metadata
    dtype: ${ field_13_type }
    hide: ${ ('part' if int(num_extra_fields) >= 13 else 'all') }
-   id: field_14_key
    label: Field 14 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 14 else 'all') }
-   id: field_14_type
    label: Field 14 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 14 else 'all') }
-   id: field_14_value
    label: Field 14 Value
    category: Metadata
    dtype: ${ field_14_type }
    hide: ${ ('part' if int(num_extra_fields) >= 14 else 'all') }
-   id: field_15_key
    label: Field 15 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 15 else 'all') }
-   id: field_15_type
    label: Field 15 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 15 else 'all') }
-   id: field_15_value
    label: Field 15 Value
    category: Metadata
    dtype: ${ field_15_type }
    hide: ${ ('part' if int(num_extra_fields) >= 15 else 'all') }
-   id: field_16_key
    label: Field 16 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 16 else 'all') }
-   id: field_16_type
    label: Field 16 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 16 else 'all') }
-   id: field_16_value
    label: Field 16 Value
    category: Metadata
    dtype: ${ field_16_type }
    hide: ${ ('part' if int(num_extra_fields) >= 16 else 'all') }
-   id: field_17_key
    label: Field 17 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 17 else 'all') }
-   id: field_17_type
    label: Field 17 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 17 else 'all') }
-   id: field_17_value
    label: Field 17 Value
    category: Metadata
    dtype: ${ field_17_type }
    hide: ${ ('part' if int(num_extra_fields) >= 17 else 'all') }
-   id: field_18_key
    label: Field 18 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 18 else 'all') }
-   id: field_18_type
    label: Field 18 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 18 else 'all') }
-   id: field_18_value
    label: Field 18 Value
    category: Metadata
    dtype: ${ field_18_type }
    hide: ${ ('part' if int(num_extra_fields) >= 18 else 'all') }
-   id: field_19_key
    label: Field 19 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 19 else 'all') }
-   id: field_19_type
    label: Field 19 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 19 else 'all') }
-   id: field_19_value
    label: Field 19 Value
    category: Metadata
    dtype: ${ field_19_type }
    hide: ${ ('part' if int(num_extra_fields) >= 19 else 'all') }
-   id: field_20_key
    label: Field 20 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 20 else 'all') }
-   id: field_20_type
    label: Field 20 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 20 else 'all') }
-   id: field_20_value
    label: Field 20 Value
    category: Metadata
    dtype: ${ field_20_type }
    hide: ${ ('part' if int(num_extra_fields) >= 20 else 'all') }
-   id: field_21_key
    label: Field 21 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 21 else 'all') }
-   id: field_21_type
    label: Field 21 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 21 else 'all') }
-   id: field_21_value
    label: Field 21 Value
    category: Metadata
    dtype: ${ field_21_type }
    hide: ${ ('part' if int(num_extra_fields) >= 21 else 'all') }
-   id: field_22_key
    label: Field 22 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 22 else 'all') }
-   id: field_22_type
    label: Field 22 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 22 else 'all') }
-   id: field_22_value
    label: Field 22 Value
    category: Metadata
    dtype: ${ field_22_type }
    hide: ${ ('part' if int(num_extra_fields) >= 22 else 'all') }
-   id: field_23_key
    label: Field 23 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 23 else 'all') }
-   id: field_23_type
    label: Field 23 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 23 else 'all') }
-   id: field_23_value
    label: Field 23 Value
    category: Metadata
    dtype: ${ field_23_type }
    hide: ${ ('part' if int(num_extra_fields) >= 23 else 'all') }
-   id: field_24_key
    label: Field 24 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 24 else 'all') }
-   id: field_24_type
    label: Field 24 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 24 else 'all') }
-   id: field_24_value
    label: Field 24 Value
    category: Metadata
    dtype: ${ field_24_type }
    hide: ${ ('part' if int(num_extra_fields) >= 24 else 'all') }
-   id: field_25_key
    label: Field 25 Key
    category: Metadata
    dtype: string
    hide: ${ ('part' if int(num_extra_fields) >= 25 else 'all') }
-   id: field_25_type
    label: Field 25 Type
    category: Metadata
    dtype: enum
    default: string
    options: [int, float, bool, string]
    option_labels: [Integer, Float, Boolean, String]
    hide: ${ ('part' if int(num_extra_fields) >= 25 else 'all') }
-   id: field_25_value
    label: Field 25 Value
    category: Metadata
    dtype: ${ field_25_type }
    hide: ${ ('part' if int(num_extra_fields) >= 25 else 'all') }
-   id: append
    label: Open in append mode?
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
    hide: part

inputs:
-   domain: stream
    dtype: ${ type }
    multiplicity: ${ nchan }
-   domain: message
    id: command
    optional: true
-   domain: message
    id: gps
    optional: true

templates:
    imports: import gr_sigmf
    make: "gr_sigmf.sink(\"${type.sigmf_type}\", ${filename}, ${time_mode}, ${append}, ${nchan})\n\
        self.${id}.set_global_meta(\"core:sample_rate\", ${samp_rate})\n% if description\
        \ != \"\":\nself.${id}.set_global_meta(\"core:description\", ${description})\n\
        % endif\n% if author != \"\":\nself.${id}.set_global_meta(\"core:author\"\
        , ${author})\n% endif\n% if license != \"\":\nself.${id}.set_global_meta(\"\
        core:license\", ${license})\n% endif\n% if hardware != \"\":\nself.${id}.set_global_meta(\"\
        core:hw\", ${hardware})\n% endif\n\
        % for i in range(1, int(num_extra_fields) + 1):\n\
        <%
        field_val = eval('pageargs[' + '\"field_' + str(i) + '_value\"]')\n\
        field_key = eval('pageargs[' + '\"field_' + str(i) + '_key\"]')\n\
        field_type = eval('pageargs[' + '\"field_' + str(i) + '_type\"]')\n\
        %>\n\
        self.${id}.set_global_meta(${field_key}, ${field_val})\n\
        % endfor"

    # Original version of make created by auto generator.
    # make: "gr_sigmf.sink(\"$type.sigmf_type\", ${filename}, ${time_mode}, ${append})\n\
    #     self.${id}.set_global_meta(\"core:sample_rate\", ${samp_rate})\n% if description\
    #     \ != \"\":\nself.${id}.set_global_meta(\"core:description\", ${description})\n\
    #     % endif\n% if author != \"\":\nself.${id}.set_global_meta(\"core:author\"\
    #     , ${author})\n% endif\n% if license != \"\":\nself.${id}.set_global_meta(\"\
    #     core:license\", ${license})\n% endif\n% if hardware != \"\":\nself.${id}.set_global_meta(\"\
    #     core:hw\", ${hardware})\n% endif\n#for ${i} in range(1, int(${num_extra_fields})\
    #     \ + 1)\n<% field_val = getVar('field_' + str() + '_value') %>\n<% field_key\
    #     \ = getVar('field_' + str() + '_key') %>\n<% field_type = getVar('field_'\
    #     \ + str() + '_type') %>\n% if field_type == 'string':\nself.${id}.set_global_meta('$field_key()',\
    #     \ '$field_val()')\n% else:\nself.${id}.set_global_meta('$field_key()', ${field_val()})\n\
    #     % endif\n#end for\n  "

documentation: |-
    Write data to a SigMF recording.
        Note that this block relies on the stop method being called to write data correctly, so if the flowgraph is not stopped cleanly the metadata will not be written correctly.

file_format: 1
