/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(sigmf_utils.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(844924bd4d39c3952d1cff7352c3e1d6)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <sigmf/sigmf_utils.h>
// pydoc.h is automatically generated in the build directory
// #include <sigmf_utils_pydoc.h>

void bind_sigmf_utils(py::module& m)
{

    using format_detail_t    = ::gr::sigmf::format_detail_t;
    // using to_data_path    = ::gr::sigmf::to_data_path;
    // using meta_path_from_data    = ::gr::sigmf::meta_path_from_data;
    // using parse_format_str    = ::gr::sigmf::parse_format_str;


    py::class_<format_detail_t, std::shared_ptr<format_detail_t>>(m, "format_detail_t")

      .def(py::init<gr::sigmf::format_detail_t const &>(), py::arg("arg0")

             )
      .def(py::init<>())
      .def_readwrite("is_complex", &format_detail_t::is_complex)
      .def_readwrite("type_str", &format_detail_t::type_str)
      .def_readwrite("width", &format_detail_t::width)
      .def_readwrite("endianness", &format_detail_t::endianness)
      .def_readwrite("sample_size", &format_detail_t::sample_size)
      ;

    py::enum_<::gr::sigmf::endian_t>(m,"endian_t")
        .value("LITTLE", ::gr::sigmf::endian_t::LITTLE) // 0
        .value("BIG", ::gr::sigmf::endian_t::BIG) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::sigmf::endian_t>();


        m.def("to_data_path",&::gr::sigmf::to_data_path,
            py::arg("filename")
        );


        m.def("meta_path_from_data",&::gr::sigmf::meta_path_from_data,
            py::arg("data_path")
        
        );


        m.def("parse_format_str",&::gr::sigmf::parse_format_str,
            py::arg("format_str")
        
        );



}
