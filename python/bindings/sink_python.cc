/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(sink.h)                                                    */
/* BINDTOOL_HEADER_FILE_HASH(46861f21835d3a372a56c6753a306d49)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <sigmf/sink.h>
// pydoc.h is automatically generated in the build directory
#include <sink_pydoc.h>

void bind_sink(py::module& m)
{

    using sink    = ::gr::sigmf::sink;


    py::class_<sink, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<sink>>(m, "sink", D(sink))

        .def(py::init(&sink::make),
           py::arg("type"),
           py::arg("filename"),
           py::arg("time_mode") = ::gr::sigmf::sigmf_time_mode::absolute,
           py::arg("append") = false,
           py::arg("num_channels") = 1,
           D(sink,make)
        )
        




        
        .def("get_data_path",&sink::get_data_path,       
            D(sink,get_data_path)
        )


        
        .def("get_meta_path",&sink::get_meta_path,       
            D(sink,get_meta_path)
        )


        
        .def("set_global_meta",(void (sink::*)(std::string const &, pmt::pmt_t))&sink::set_global_meta,       
            py::arg("key"),
            py::arg("val"),
            D(sink,set_global_meta,0)
        )


        
        .def("set_global_meta",(void (sink::*)(std::string const &, double))&sink::set_global_meta,       
            py::arg("key"),
            py::arg("val"),
            D(sink,set_global_meta,1)
        )


        
        .def("set_global_meta",(void (sink::*)(std::string const &, int64_t))&sink::set_global_meta,       
            py::arg("key"),
            py::arg("val"),
            D(sink,set_global_meta,2)
        )


        
        .def("set_global_meta",(void (sink::*)(std::string const &, uint64_t))&sink::set_global_meta,       
            py::arg("key"),
            py::arg("val"),
            D(sink,set_global_meta,3)
        )


        
        .def("set_global_meta",(void (sink::*)(std::string const &, std::string const &))&sink::set_global_meta,       
            py::arg("key"),
            py::arg("val"),
            D(sink,set_global_meta,4)
        )


        
        .def("set_global_meta",(void (sink::*)(std::string const &, bool))&sink::set_global_meta,       
            py::arg("key"),
            py::arg("val"),
            D(sink,set_global_meta,5)
        )


        
        .def("set_annotation_meta",&sink::set_annotation_meta,       
            py::arg("sample_start"),
            py::arg("sample_count"),
            py::arg("key"),
            py::arg("val"),
            D(sink,set_annotation_meta)
        )


        
        .def("set_capture_meta",&sink::set_capture_meta,       
            py::arg("index"),
            py::arg("key"),
            py::arg("val"),
            D(sink,set_capture_meta)
        )


        
        .def("open",&sink::open,       
            py::arg("filename"),
            D(sink,open)
        )


        
        .def("close",&sink::close,       
            D(sink,close)
        )

        ;




}
