/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(source.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(23725f19514acd2d22fbd66a002e5423)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <sigmf/source.h>
// pydoc.h is automatically generated in the build directory
#include <source_pydoc.h>

void bind_source(py::module& m)
{

    using source    = ::gr::sigmf::source;


    py::class_<source, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<source>>(m, "source", D(source))

        .def(py::init(&source::make),
           py::arg("filename"),
           py::arg("output_datatype"),
           py::arg("repeat") = false,
           D(source,make)
        )
        




        
        .def_static("make_no_datatype",&source::make_no_datatype,       
            py::arg("filename"),
            py::arg("repeat") = false,
            D(source,make_no_datatype)
        )


        
        .def("set_begin_tag",&source::set_begin_tag,       
            py::arg("val"),
            D(source,set_begin_tag)
        )


        
        .def("global_meta",&source::global_meta,       
            D(source,global_meta)
        )


        
        .def("capture_segments",&source::capture_segments,       
            D(source,capture_segments)
        )

        ;




}
